;x   NAME     stack -- stack    description
;Z u0      -- a-addr       current user area adrs
;C >IN     -- a-addr        holds offset into TIB
;C BASE    -- a-addr       holds conversion radix
;C STATE   -- a-addr       holds compiler state
;Z dp      -- a-addr       holds dictionary ptr
;Z 'source  -- a-addr      two cells: len, adrs
;Z latest    -- a-addr     last word in dict.
;Z hp       -- a-addr     HOLD pointer
;Z LP       -- a-addr     Leave-stack pointer
;Z IDP    -- a-addr        ROM dictionary pointer
;Z NEWEST   -- a-addr       temporary LATEST storage
;X PAD       -- a-addr    user PAD buffer
;Z l0       -- a-addr     bottom of Leave stack
;Z r0       -- a-addr     end of return stack
;Z s0       -- a-addr     end of parameter stack
;X tib     -- a-addr     Terminal Input Buffer
;Z tibsize  -- n         size of TIB
;C BL      -- char            an ASCII space
;Z uinit    -- addr  initial values for user area
;Z #init    -- n    #bytes of user area init data
;C S>D    n -- d          single -> double prec.
;Z ?NEGATE  n1 n2 -- n3  negate n1 if n2 negative
;C ABS     n1 -- +n2     absolute value
;X DNEGATE   d1 -- d2     negate double precision
;Z ?DNEGATE  d1 n -- d2   negate d1 if n negative
;X DABS     d1 -- +d2    absolute value dbl.prec.
;C M*     n1 n2 -- d    signed 16*16->32 multiply
;C SM/REM   d1 n1 -- n2 n3   symmetric signed div
;C FM/MOD   d1 n1 -- n2 n3   floored signed div'n
;C *      n1 n2 -- n3       signed multiply
;C /MOD   n1 n2 -- n3 n4    signed divide/rem'dr
;C /      n1 n2 -- n3       signed divide
;C MOD    n1 n2 -- n3       signed remainder
;C */MOD  n1 n2 n3 -- n4 n5    n1*n2/n3, rem&quot
;C */     n1 n2 n3 -- n4        n1*n2/n3
;C MAX    n1 n2 -- n3       signed maximum
;C MIN    n1 n2 -- n3       signed minimum
;C 2@    a-addr -- x1 x2    fetch 2 cells
;C 2!    x1 x2 a-addr --    store 2 cells
;C 2DROP  x1 x2 --          drop 2 cells
;C 2DUP   x1 x2 -- x1 x2 x1 x2   dup top 2 cells
;C 2SWAP  x1 x2 x3 x4 -- x3 x4 x1 x2  per diagram
;C 2OVER  x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2
;C COUNT   c-addr1 -- c-addr2 u  counted->adr/len
;C CR      --               output newline
;C SPACE   --               output a space
;C SPACES   n --            output n spaces
;Z umin     u1 u2 -- u      unsigned minimum
;Z umax    u1 u2 -- u       unsigned maximum
;C ACCEPT  c-addr +n -- +n'  get line from term'l
;C TYPE    c-addr +n --     type line to term'l
;Z ICOUNT  c-addr1 -- c-addr2 u  counted->adr/len
;Z ITYPE   c-addr +n --       type line to term'l
;Z (IS")     -- c-addr u   run-time code for S"
;Z (S")     -- c-addr u   run-time code for S"
;C IS"      --            compile in-line string
;C S"       --             compile in-line string
;C ."       --         compile string to print
;Z IWORD     c -- c-addr       WORD to Code space
;Z UD/MOD   ud1 u2 -- u3 ud4   32/16->32 divide
;Z UD*      ud1 d2 -- ud3      32*16->32 multiply
;C HOLD  char --        add char to output string
;C <#    --             begin numeric conversion
;Z >digit   n -- c      convert to 0..9A..Z
;C #     ud1 -- ud2     convert 1 digit of output
;C #S    ud1 -- ud2     convert remaining digits
;C #>    ud1 -- c-addr u    end conv., get string
;C SIGN  n --           add minus sign if n<0
;C U.    u --           display u unsigned
;C .     n --           display n signed
;C DECIMAL  --      set number base to decimal
;X HEX     --       set number base to hex
;C HERE    -- addr      returns dictionary ptr
;C ALLOT   n --         allocate n bytes in dict
;C ,    x --           append cell to dict
;C C,   char --        append char to dict
;C IHERE    -- addr   returns Code dictionary ptr
;C IALLOT   n --    allocate n bytes in Code dict
;C I,    x --           append cell to Code dict
;C IC,   char --        append char to Code dict
;C SOURCE   -- adr n    current input buffer
;X /STRING  a u n -- a+n u-n   trim string
;Z >counted  src n dst --     copy to counted str
;C WORD   char -- c-addr n   word delim'd by char
;Z NFA>LFA   nfa -- lfa    name adr -> link field
;Z NFA>CFA   nfa -- cfa    name adr -> code field
;Z IMMED?    nfa -- f      fetch immediate flag
;C FIND   c-addr -- c-addr 0   if not found
;C                  xt  1      if immediate
;C                  xt -1      if "normal"
;C LITERAL  x --        append numeric literal
;Z DIGIT?   c -- n -1   if c is a valid digit
;Z            -- x  0   otherwise
;Z ?SIGN   adr n -- adr' n' f  get optional sign
;Z  advance adr/n if sign; return NZ if negative
;C >NUMBER  ud adr u -- ud' adr' u'
;C                      convert string to number
;Z ?NUMBER  c-addr -- n -1      string->number
;Z                 -- c-addr 0  if convert error
;Z INTERPRET    i*x c-addr u -- j*x
;Z                      interpret given buffer
;C EVALUATE  i*x c-addr u -- j*x  interprt string
;C QUIT     --    R: i*x --    interpret from kbd
;C ABORT    i*x --   R: j*x --   clear stk & QUIT
;Z ?ABORT   f c-addr u --      abort & print msg
;C ABORT"  i*x 0  -- i*x   R: j*x -- j*x  x1=0
;C         i*x x1 --       R: j*x --      x1<>0
;C '    -- xt           find word in dictionary
;C CHAR   -- char           parse ASCII character
;C [CHAR]   --          compile character literal
;C (    --                     skip input until )
;Z HEADER   --      create a Forth word header
;Z <BUILDS  --      define a word with t.b.d. action & no data
;C CREATE   --      create an empty definition
;Z (DOES>)  --      run-time action of DOES>
;C DOES>    --      change action of latest def'n
;C RECURSE  --      recurse current definition
;C [        --      enter interpretive state
;C ]        --      enter compiling state
;Z HIDE     --      "hide" latest definition    Flashable
;Z REVEAL   --      "reveal" latest definition  Flashable
;C IMMEDIATE   --   make last def'n immediate
;C :        --      begin a colon definition  
;C ;
;C [']  --         find word & compile as literal
;C POSTPONE  --   postpone compile action of word
;Z COMPILE   --   append inline execution token
;C IF       -- adrs    conditional forward branch
;C THEN     adrs --        resolve forward branch
;C ELSE     adrs1 -- adrs2    branch for IF..ELSE
;C BEGIN    -- adrs        target for bwd. branch
;C UNTIL    adrs --   conditional backward branch
;X AGAIN    adrs --      uncond'l backward branch
;C WHILE    adrs1 -- adrs2 adrs1
;C REPEAT   adrs2 adrs1 --     resolve WHILE loop
;Z >L   x --   L: -- x        move to leave stack
;Z L>   -- x   L: x --      move from leave stack
;C DO       -- adrs   L: -- 0
;Z ENDLOOP   adrs xt --   L: 0 a1 a2 .. aN --
;C LOOP    adrs --   L: 0 a1 a2 .. aN --
;C +LOOP   adrs --   L: 0 a1 a2 .. aN --
;C LEAVE    --    L: -- adrs
;X WITHIN   n1|u1 n2|u2 n3|u3 -- f   n2<=n1<n3?
;C MOVE    addr1 addr2 u --     smart move
;C DEPTH    -- +n        number of items on stack
;C ENVIRONMENT?  c-addr u -- false   system query
;Z FLALIGNED   a -- a'      align IDP to flash boundary
;X MARKER   --      create word to restore dictionary
;X WORDS    --          list all words in dict.
;X U.R    u n --           display u unsigned in n width
;X DUMP  adr n  --   dump memory
;X .S      --           print stack contents
;Z COLD     --      cold start Forth system
